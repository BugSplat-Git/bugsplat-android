plugins {
    id 'com.android.library'
}

android {
    namespace 'com.bugsplat.android'
    compileSdk 35

    // Enable BuildConfig generation
    buildFeatures {
        buildConfig true
    }

    defaultConfig {
        minSdk 21
        targetSdk 35
        ndk {
            abiFilters 'arm64-v8a', 'x86_64', 'armeabi-v7a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        resources {
            // Replaced excludes with doNotStrip to preserve symbols in .so files
            doNotStrip '*/arm64-v8a/*.so'
            doNotStrip '*/x86_64/*.so'
            doNotStrip '*/armeabi-v7a/*.so'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/cpp/crashpad/lib']
            // Ensure assets directory exists
            assets.srcDirs = ['src/main/assets']
        }
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }

    ndkVersion '27.2.12479018'
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}

// Create assets directory if it doesn't exist
task createAssetsDirectory {
    doLast {
        def assetsDir = file('src/main/assets')
        if (!assetsDir.exists()) {
            assetsDir.mkdirs()
        }
    }
}

// Copy symbol-upload binary to assets directory
// This assumes the symbol-upload binary is in the project root directory
// Adjust the path as needed
task copySymbolUploadBinary(dependsOn: createAssetsDirectory) {
    doLast {
        def symbolUploadBinary = file('../symbol-upload')
        if (symbolUploadBinary.exists()) {
            copy {
                from symbolUploadBinary
                into 'src/main/assets'
            }
        } else {
            logger.warn("symbol-upload binary not found at ${symbolUploadBinary.absolutePath}")
            logger.warn("Please place the symbol-upload binary in the project root directory or adjust the path in build.gradle")
        }
    }
}

// Run the copy task before the preBuild task
preBuild.dependsOn copySymbolUploadBinary

afterEvaluate {
    android.libraryVariants.all { variant ->
        def bundleTask = tasks.named("bundle${variant.name.capitalize()}Aar")
        bundleTask.configure {
            def aarOutputDir = file("${buildDir}/outputs/aar")
            def originalAarName = "app-${variant.name}.aar"
            def newAarName = "bugsplat-android-${variant.name}.aar"
            def originalFile = file("$aarOutputDir/$originalAarName")
            def newFile = file("$aarOutputDir/$newAarName")

            doLast {
                if (originalFile.exists()) {
                    originalFile.renameTo(newFile)
                }
            }
        }
    }
}